[
  {
    "script": {
      "description": "Evaluate MySQL health",
      "lang": "painless",
      "source": "           // Initialize health structure if it doesn't exist           if (ctx.health == null) {             ctx.health = new HashMap();             ctx.health.issues = new ArrayList();           }                      // Set evaluation type           ctx.health.evaluation_type = \"mysql\";                      // Define severity levels           def HEALTHY = 0;           def WARNING = 1;           def CRITICAL = 2;           int currentSeverity = HEALTHY;                      // Get MySQL thresholds if available           def mysqlThresholds = ctx.thresholds?.thresholds?.mysql?.status;           if (mysqlThresholds == null) {             ctx.health.status = \"unknown\";             Map issue = new HashMap();             issue.put(\"message\", \"No MySQL thresholds defined for this service\");             ctx.health.issues.add(issue);             return;           }                      // Flatten critical MySQL metrics for easier access in service-health           if (ctx.mysql?.status?.threads?.connected != null) {             ctx['mysql.status.threads.connected'] = ctx.mysql.status.threads.connected;           }           if (ctx.mysql?.status?.threads?.running != null) {             ctx['mysql.status.threads.running'] = ctx.mysql.status.threads.running;           }           if (ctx.mysql?.status?.slow_queries != null) {             ctx['mysql.status.slow_queries'] = ctx.mysql.status.slow_queries;           }           if (ctx.mysql?.status?.aborted?.clients != null) {             ctx['mysql.status.aborted.clients'] = ctx.mysql.status.aborted.clients;           }           if (ctx.mysql?.status?.aborted?.connects != null) {             ctx['mysql.status.aborted.connects'] = ctx.mysql.status.aborted.connects;           }                      // Check connected threads           if (ctx.mysql?.status?.threads?.connected != null && mysqlThresholds?.threads?.connected != null) {             def metric = \"mysql.status.threads.connected\";             def value = ctx.mysql.status.threads.connected;             def warnThreshold = mysqlThresholds.threads.connected.warning;             def critThreshold = mysqlThresholds.threads.connected.critical;                          if (critThreshold != null && value >= critThreshold) {               currentSeverity = CRITICAL;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", critThreshold);               issue.put(\"severity\", \"critical\");               issue.put(\"message\", \"MySQL connected threads count is critical: \" + value + \" (threshold: \" + critThreshold + \")\");               ctx.health.issues.add(issue);             } else if (warnThreshold != null && value >= warnThreshold) {               if (WARNING > currentSeverity) currentSeverity = WARNING;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", warnThreshold);               issue.put(\"severity\", \"warning\");               issue.put(\"message\", \"MySQL connected threads count is elevated: \" + value + \" (threshold: \" + warnThreshold + \")\");               ctx.health.issues.add(issue);             }           }                      // Check running threads           if (ctx.mysql?.status?.threads?.running != null && mysqlThresholds?.threads?.running != null) {             def metric = \"mysql.status.threads.running\";             def value = ctx.mysql.status.threads.running;             def warnThreshold = mysqlThresholds.threads.running.warning;             def critThreshold = mysqlThresholds.threads.running.critical;                          if (critThreshold != null && value >= critThreshold) {               currentSeverity = CRITICAL;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", critThreshold);               issue.put(\"severity\", \"critical\");               issue.put(\"message\", \"MySQL running threads count is critical: \" + value + \" (threshold: \" + critThreshold + \")\");               ctx.health.issues.add(issue);             } else if (warnThreshold != null && value >= warnThreshold) {               if (WARNING > currentSeverity) currentSeverity = WARNING;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", warnThreshold);               issue.put(\"severity\", \"warning\");               issue.put(\"message\", \"MySQL running threads count is elevated: \" + value + \" (threshold: \" + warnThreshold + \")\");               ctx.health.issues.add(issue);             }           }                      // Check slow queries           if (ctx.mysql?.status?.slow_queries != null && mysqlThresholds?.slow_queries != null) {             def metric = \"mysql.status.slow_queries\";             def value = ctx.mysql.status.slow_queries;             def warnThreshold = mysqlThresholds.slow_queries.warning;             def critThreshold = mysqlThresholds.slow_queries.critical;                          if (critThreshold != null && value >= critThreshold) {               currentSeverity = CRITICAL;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", critThreshold);               issue.put(\"severity\", \"critical\");               issue.put(\"message\", \"MySQL slow queries count is critical: \" + value + \" (threshold: \" + critThreshold + \")\");               ctx.health.issues.add(issue);             } else if (warnThreshold != null && value >= warnThreshold) {               if (WARNING > currentSeverity) currentSeverity = WARNING;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", warnThreshold);               issue.put(\"severity\", \"warning\");               issue.put(\"message\", \"MySQL slow queries count is elevated: \" + value + \" (threshold: \" + warnThreshold + \")\");               ctx.health.issues.add(issue);             }           }                      // Check aborted clients           if (ctx.mysql?.status?.aborted?.clients != null && mysqlThresholds?.aborted?.clients != null) {             def metric = \"mysql.status.aborted.clients\";             def value = ctx.mysql.status.aborted.clients;             def warnThreshold = mysqlThresholds.aborted.clients.warning;             def critThreshold = mysqlThresholds.aborted.clients.critical;                          if (critThreshold != null && value >= critThreshold) {               currentSeverity = CRITICAL;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", critThreshold);               issue.put(\"severity\", \"critical\");               issue.put(\"message\", \"MySQL aborted clients count is critical: \" + value + \" (threshold: \" + critThreshold + \")\");               ctx.health.issues.add(issue);             } else if (warnThreshold != null && value >= warnThreshold) {               if (WARNING > currentSeverity) currentSeverity = WARNING;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", warnThreshold);               issue.put(\"severity\", \"warning\");               issue.put(\"message\", \"MySQL aborted clients count is elevated: \" + value + \" (threshold: \" + warnThreshold + \")\");               ctx.health.issues.add(issue);             }           }                      // Set the overall health status based on the highest severity encountered           ctx.health.status = currentSeverity == HEALTHY ? \"healthy\" : (currentSeverity == WARNING ? \"warning\" : \"critical\");         "
    }
  }
]
