[
  {
    "script": {
      "description": "Evaluate system metrics health",
      "lang": "painless",
      "source": "           // Initialize health structure if it doesn't exist           if (ctx.health == null) {             ctx.health = new HashMap();             ctx.health.issues = new ArrayList();           }                      // Only set evaluation type if not already set by a more specific pipeline           if (ctx.health.evaluation_type == null) {             ctx.health.evaluation_type = \"system\";           }                      // Define severity levels           def HEALTHY = 0;           def WARNING = 1;           def CRITICAL = 2;           int currentSeverity = ctx.health.status == \"critical\" ? CRITICAL :                                 (ctx.health.status == \"warning\" ? WARNING : HEALTHY);                      // Get system thresholds if available           def sysThresholds = ctx.thresholds?.thresholds?.system;           if (sysThresholds == null) {             // If we haven't already set a status and have no thresholds, mark as unknown             if (ctx.health.status == null) {               ctx.health.status = \"unknown\";               Map issue = new HashMap();               issue.put(\"message\", \"No system thresholds defined for this service\");               ctx.health.issues.add(issue);             }             return;           }                      // Flatten critical system metrics for easier access in service-health           if (ctx.system?.cpu?.total?.pct != null) {             ctx['system.cpu.total.pct'] = ctx.system.cpu.total.pct;           }           if (ctx.system?.cpu?.iowait?.pct != null) {             ctx['system.cpu.iowait.pct'] = ctx.system.cpu.iowait.pct;           }           if (ctx.system?.load != null) {             if (ctx.system.load['1'] != null) ctx['system.load.1'] = ctx.system.load['1'];             if (ctx.system.load['5'] != null) ctx['system.load.5'] = ctx.system.load['5'];             if (ctx.system.load['15'] != null) ctx['system.load.15'] = ctx.system.load['15'];           }           if (ctx.system?.memory?.used?.pct != null) {             ctx['system.memory.used.pct'] = ctx.system.memory.used.pct;           }           if (ctx.system?.memory?.swap?.used?.pct != null) {             ctx['system.memory.swap.used.pct'] = ctx.system.memory.swap.used.pct;           }                      // Check CPU usage           if (ctx.system?.cpu?.total?.pct != null && sysThresholds?.cpu?.total?.pct != null) {             def metric = \"system.cpu.total.pct\";             def value = ctx.system.cpu.total.pct;             def warnThreshold = sysThresholds.cpu.total.pct.warning;             def critThreshold = sysThresholds.cpu.total.pct.critical;                          if (critThreshold != null && value >= critThreshold) {               currentSeverity = CRITICAL;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", critThreshold);               issue.put(\"severity\", \"critical\");               issue.put(\"message\", \"CPU usage is critical: \" + (value * 100).round(1) + \"% (threshold: \" + (critThreshold * 100).round(1) + \"%)\");               ctx.health.issues.add(issue);             } else if (warnThreshold != null && value >= warnThreshold) {               if (WARNING > currentSeverity) currentSeverity = WARNING;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", warnThreshold);               issue.put(\"severity\", \"warning\");               issue.put(\"message\", \"CPU usage is elevated: \" + (value * 100).round(1) + \"% (threshold: \" + (warnThreshold * 100).round(1) + \"%)\");               ctx.health.issues.add(issue);             }           }                      // Check I/O wait           if (ctx.system?.cpu?.iowait?.pct != null && sysThresholds?.cpu?.iowait?.pct != null) {             def metric = \"system.cpu.iowait.pct\";             def value = ctx.system.cpu.iowait.pct;             def warnThreshold = sysThresholds.cpu.iowait.pct.warning;             def critThreshold = sysThresholds.cpu.iowait.pct.critical;                          if (critThreshold != null && value >= critThreshold) {               currentSeverity = CRITICAL;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", critThreshold);               issue.put(\"severity\", \"critical\");               issue.put(\"message\", \"CPU I/O wait is critical: \" + (value * 100).round(1) + \"% (threshold: \" + (critThreshold * 100).round(1) + \"%)\");               ctx.health.issues.add(issue);             } else if (warnThreshold != null && value >= warnThreshold) {               if (WARNING > currentSeverity) currentSeverity = WARNING;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", warnThreshold);               issue.put(\"severity\", \"warning\");               issue.put(\"message\", \"CPU I/O wait is elevated: \" + (value * 100).round(1) + \"% (threshold: \" + (warnThreshold * 100).round(1) + \"%)\");               ctx.health.issues.add(issue);             }           }                      // Check memory usage           if (ctx.system?.memory?.used?.pct != null && sysThresholds?.memory?.used?.pct != null) {             def metric = \"system.memory.used.pct\";             def value = ctx.system.memory.used.pct;             def warnThreshold = sysThresholds.memory.used.pct.warning;             def critThreshold = sysThresholds.memory.used.pct.critical;                          if (critThreshold != null && value >= critThreshold) {               currentSeverity = CRITICAL;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", critThreshold);               issue.put(\"severity\", \"critical\");               issue.put(\"message\", \"Memory usage is critical: \" + (value * 100).round(1) + \"% (threshold: \" + (critThreshold * 100).round(1) + \"%)\");               ctx.health.issues.add(issue);             } else if (warnThreshold != null && value >= warnThreshold) {               if (WARNING > currentSeverity) currentSeverity = WARNING;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", warnThreshold);               issue.put(\"severity\", \"warning\");               issue.put(\"message\", \"Memory usage is elevated: \" + (value * 100).round(1) + \"% (threshold: \" + (warnThreshold * 100).round(1) + \"%)\");               ctx.health.issues.add(issue);             }           }                      // Check load average (1m)           if (ctx.system?.load != null && ctx.system.load['1'] != null && sysThresholds?.load != null && sysThresholds.load['1'] != null) {             def metric = \"system.load.1\";             def value = ctx.system.load['1'];             def warnThreshold = sysThresholds.load['1'].warning;             def critThreshold = sysThresholds.load['1'].critical;                          if (critThreshold != null && value >= critThreshold) {               currentSeverity = CRITICAL;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", critThreshold);               issue.put(\"severity\", \"critical\");               issue.put(\"message\", \"Load average (1m) is critical: \" + value + \" (threshold: \" + critThreshold + \")\");               ctx.health.issues.add(issue);             } else if (warnThreshold != null && value >= warnThreshold) {               if (WARNING > currentSeverity) currentSeverity = WARNING;               Map issue = new HashMap();               issue.put(\"metric\", metric);               issue.put(\"value\", value);               issue.put(\"threshold\", warnThreshold);               issue.put(\"severity\", \"warning\");               issue.put(\"message\", \"Load average (1m) is elevated: \" + value + \" (threshold: \" + warnThreshold + \")\");               ctx.health.issues.add(issue);             }           }                      // Set the overall health status based on the highest severity encountered           // Only update if we found issues or if no status is set yet           if (currentSeverity > HEALTHY || ctx.health.status == null) {             ctx.health.status = currentSeverity == HEALTHY ? \"healthy\" : (currentSeverity == WARNING ? \"warning\" : \"critical\");           }         "
    }
  }
]
