[
  {
    "script": {
      "description": "Evaluate MySQL health",
      "lang": "painless",
      "source": "// Initialize health structure if it doesn't exist\nif (ctx.health == null) {\n  ctx.health = new HashMap();\n  ctx.health.issues = new ArrayList();\n}\n\n// Constants for severity levels\ndef HEALTHY = 0;\ndef WARNING = 1;\ndef CRITICAL = 2;\n\n// Initialize MySQL health structure\nif (ctx.health.mysql == null) {\n  ctx.health.mysql = new HashMap();\n  ctx.health.mysql.status = HEALTHY;\n  ctx.health.mysql.metrics = new HashMap();\n}\n\n// Check if we have MySQL metrics to evaluate\nif (ctx.containsKey('mysql')) {\n  // Evaluate threads connected\n  if (ctx.containsKey('mysql.status.threads.connected')) {\n    def metric = ctx['mysql.status.threads.connected'];\n    def metricName = 'status.threads.connected';\n    def status = HEALTHY;\n    def message = null;\n\n    // Get thresholds from enrichment\n    def warning = ctx.threshold?.mysql?.status?.threads?.connected?.warning;\n    def critical = ctx.threshold?.mysql?.status?.threads?.connected?.critical;\n\n    if (critical != null && metric >= critical) {\n      status = CRITICAL;\n      message = 'MySQL connected threads count is critically high: ' + metric + ' (threshold: ' + critical + ')';\n    } else if (warning != null && metric >= warning) {\n      status = WARNING;\n      message = 'MySQL connected threads count is high: ' + metric + ' (threshold: ' + warning + ')';\n    }\n\n    // Store metric evaluation\n    ctx.health.mysql.metrics[metricName] = new HashMap();\n    ctx.health.mysql.metrics[metricName].value = metric;\n    ctx.health.mysql.metrics[metricName].status = status;\n    ctx.health.mysql.metrics[metricName].warning_threshold = warning;\n    ctx.health.mysql.metrics[metricName].critical_threshold = critical;\n\n    // Update overall MySQL status\n    if (status > ctx.health.mysql.status) {\n      ctx.health.mysql.status = status;\n    }\n\n    // Add issue if not healthy\n    if (status > HEALTHY && message != null) {\n      def issue = new HashMap();\n      issue.component = 'mysql';\n      issue.metric = metricName;\n      issue.severity = status == CRITICAL ? 'critical' : 'warning';\n      issue.message = message;\n      ctx.health.issues.add(issue);\n    }\n  }\n\n  // Evaluate slow queries\n  if (ctx.containsKey('mysql.status.slow_queries')) {\n    def metric = ctx['mysql.status.slow_queries'];\n    def metricName = 'status.slow_queries';\n    def status = HEALTHY;\n    def message = null;\n\n    // Get thresholds from enrichment\n    def warning = ctx.threshold?.mysql?.status?.slow_queries?.warning;\n    def critical = ctx.threshold?.mysql?.status?.slow_queries?.critical;\n\n    if (critical != null && metric >= critical) {\n      status = CRITICAL;\n      message = 'MySQL slow queries count is critically high: ' + metric + ' (threshold: ' + critical + ')';\n    } else if (warning != null && metric >= warning) {\n      status = WARNING;\n      message = 'MySQL slow queries count is high: ' + metric + ' (threshold: ' + warning + ')';\n    }\n\n    // Store metric evaluation\n    ctx.health.mysql.metrics[metricName] = new HashMap();\n    ctx.health.mysql.metrics[metricName].value = metric;\n    ctx.health.mysql.metrics[metricName].status = status;\n    ctx.health.mysql.metrics[metricName].warning_threshold = warning;\n    ctx.health.mysql.metrics[metricName].critical_threshold = critical;\n\n    // Update overall MySQL status\n    if (status > ctx.health.mysql.status) {\n      ctx.health.mysql.status = status;\n    }\n\n    // Add issue if not healthy\n    if (status > HEALTHY && message != null) {\n      def issue = new HashMap();\n      issue.component = 'mysql';\n      issue.metric = metricName;\n      issue.severity = status == CRITICAL ? 'critical' : 'warning';\n      issue.message = message;\n      ctx.health.issues.add(issue);\n    }\n  }\n\n  // Add similar evaluations for other MySQL metrics\n  // ...\n}"
    }
  }
]
